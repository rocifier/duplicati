<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AMZKeyDescriptionLong" xml:space="preserve">
    <value>The AWS "Secret Access Key" can be obtained after logging into your AWS account, this can also be supplied through the "auth-password" property</value>
  </data>
  <data name="AMZKeyDescriptionShort" xml:space="preserve">
    <value>The AWS "Secret Access Key"</value>
  </data>
  <data name="AMZUserIDDescriptionLong" xml:space="preserve">
    <value>The AWS "Access Key ID" can be obtained after logging into your AWS account, this can also be supplied through the "auth-username" property</value>
  </data>
  <data name="AMZUserIDDescriptionShort" xml:space="preserve">
    <value>The AWS "Access Key ID"</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>The Cloud</value>
  </data>
  <data name="AuthPasswordDescriptionLong" xml:space="preserve">
    <value>The password used to connect to the server. This may also be supplied as the environment variable "AUTH_PASSWORD".</value>
  </data>
  <data name="AuthPasswordDescriptionShort" xml:space="preserve">
    <value>Supplies the password used to connect to the server</value>
  </data>
  <data name="AuthUsernameDescriptionLong" xml:space="preserve">
    <value>The username used to connect to the server. This may also be supplied as the environment variable "AUTH_USERNAME".</value>
  </data>
  <data name="AuthUsernameDescriptionShort" xml:space="preserve">
    <value>Supplies the username used to connect to the server</value>
  </data>
  <data name="NoAMZKeyError" xml:space="preserve">
    <value>No Amazon S3 secret key given</value>
  </data>
  <data name="NoAMZUserIDError" xml:space="preserve">
    <value>No Amazon S3 userID given</value>
  </data>
  <data name="S3NewStyleDescriptionLong" xml:space="preserve">
    <value>Specify this argument to make the S3 backend use subdomains rather than the previous url prefix method. See the Amazon S3 documentation for more details.</value>
  </data>
  <data name="S3NewStyleDescriptionShort" xml:space="preserve">
    <value>Use subdomain calling style</value>
  </data>
  <data name="UnableToDecodeBucketnameError" xml:space="preserve">
    <value>Unable to determine the bucket name for host: {0}</value>
  </data>
  <data name="S3UseRRSDescriptionLong" xml:space="preserve">
    <value>This flag toggles the use of the special RRS header. Files stored using RRS are more likely to disapear than those stored normally, but also costs less to store. See the full description here: http://aws.amazon.com/about-aws/whats-new/2010/05/19/announcing-amazon-s3-reduced-redundancy-storage/</value>
  </data>
  <data name="S3UseRRSDescriptionShort" xml:space="preserve">
    <value>Use Reduced Redundancy Storage</value>
  </data>
  <data name="DeprecatedUrlFormat" xml:space="preserve">
    <value>You are using a deprected url format, please change it to: {0}</value>
  </data>
  <data name="Description_v2" xml:space="preserve">
    <value>This backend can read and write data to an Amazon S3 compatible server. Allowed formats are: "s3://bucketname/prefix"</value>
  </data>
  <data name="OptionsAreMutuallyExclusiveError" xml:space="preserve">
    <value>The options --{0} and --{1} are mutually exclusive</value>
  </data>
  <data name="S3LocationDescriptionLong" xml:space="preserve">
    <value>This option is only used when creating new buckets. Use this option to change what region the data is stored in. Amazon charges slightly more for non-US buckets. Known bucket locations:
{0}</value>
  </data>
  <data name="S3LocationDescriptionShort" xml:space="preserve">
    <value>Specifies S3 location constraints</value>
  </data>
  <data name="S3ServerNameDescriptionLong" xml:space="preserve">
    <value>Companies other than Amazon are now supporting the S3 API, meaning that this backend can read and write data to those providers as well. Use this option to set the hostname. Currently known providers are:
{0}</value>
  </data>
  <data name="S3ServerNameDescriptionShort" xml:space="preserve">
    <value>Specifies an alternate S3 server name</value>
  </data>
  <data name="UnableToParseURLError" xml:space="preserve">
    <value>Could not parse the url: {0}</value>
  </data>
  <data name="S3NewStyleDeprecation" xml:space="preserve">
    <value>The subdomain calling option does nothing, the library will pick the right calling convention</value>
  </data>
  <data name="DescriptionUseSSLLong" xml:space="preserve">
    <value>Use this flag to communicate using Secure Socket Layer (SSL) over http (https). Note that bucket names containing a period has problems with SSL connections.</value>
  </data>
  <data name="DescriptionUseSSLShort" xml:space="preserve">
    <value>Instructs Duplicati to use an SSL (https) connection</value>
  </data>
  <data name="AuthEmailDescriptionLong" xml:space="preserve">
    <value>Your email address. This is the email address used when purchasing the product.</value>
  </data>
  <data name="AuthEmailDescriptionShort" xml:space="preserve">
    <value>Your email address</value>
  </data>
</root>