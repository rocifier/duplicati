<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>The GPG encryption module uses the GNU Privacy Guard program to encrypt and decrypt files. It requires that the gpg executable is available on the system. On Windows it is assumed that this is in the default installation folder under program files, under Linux and OSX it is assumed that the program is available via the PATH environment variable. It is possible to supply the path to GPG using the --gpg-program-path switch.</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>GNU Privacy Guard, external</value>
  </data>
  <data name="GpgencryptiondecryptionswitchesLong" xml:space="preserve">
    <value>Use this switch to specify any extra options to GPG. You cannot specify the --passphrase-fd option here. The --decrypt option is always specified.</value>
  </data>
  <data name="GpgencryptiondecryptionswitchesShort" xml:space="preserve">
    <value>Extra GPG commandline options for decryption</value>
  </data>
  <data name="GpgencryptiondisablearmorLong" xml:space="preserve">
    <value>The GPG encryption/decryption will use the --armor option for GPG to protect the files with armor. Specify this switch to remove the --armor option.</value>
  </data>
  <data name="GpgencryptiondisablearmorShort" xml:space="preserve">
    <value>Don't use GPG Armor</value>
  </data>
  <data name="GpgencryptionencryptionswitchesLong" xml:space="preserve">
    <value>Use this switch to specify any extra options to GPG. You cannot specify the --passphrase-fd option here. The --encrypt option is always specified.</value>
  </data>
  <data name="GpgencryptionencryptionswitchesShort" xml:space="preserve">
    <value>Extra GPG commandline options for encryption</value>
  </data>
  <data name="GPGExecuteError" xml:space="preserve">
    <value>Failed to execute GPG at "{0}": {1}</value>
  </data>
  <data name="GpgprogrampathLong" xml:space="preserve">
    <value>The path to the GNU Privacy Guard program. If not supplied, Duplicati will assume that the program "gpg" is available in the system path.</value>
  </data>
  <data name="GpgprogrampathShort" xml:space="preserve">
    <value>The path to GnuPG</value>
  </data>
  <data name="SignkeyLong" xml:space="preserve">
    <value>The GNU Privacy Guard can optionally sign volumes with a special key. This feature is not currently active in Duplicati.</value>
  </data>
  <data name="SignkeyShort" xml:space="preserve">
    <value>Sign key for GnuPG</value>
  </data>
  <data name="GPGNotFoundWarning" xml:space="preserve">
    <value>Duplicati was unable to verify the existence of GNU Privacy Guard.
GPG may work regardless, if it is located in the system search path.
If the encryption fails, no files will be backed up
Do you want to continue anyway?</value>
  </data>
  <data name="Gpgencryptiondisablearmordeprecated" xml:space="preserve">
    <value>This option has non-standard handling, please use the --{0} option instead.</value>
  </data>
  <data name="GpgencryptionenablearmorLong" xml:space="preserve">
    <value>Use this option to supply the --armor option to GPG. The files will be larger but can be sent as pure text files.</value>
  </data>
  <data name="GpgencryptionenablearmorShort" xml:space="preserve">
    <value>Use GPG Armor</value>
  </data>
  <data name="GpgencryptiondecryptioncommandLong" xml:space="preserve">
    <value>Overrides the GPG command supplied for decryption</value>
  </data>
  <data name="GpgencryptiondecryptioncommandShort" xml:space="preserve">
    <value>The GPG decryption command</value>
  </data>
  <data name="GpgencryptionencryptioncommandLong" xml:space="preserve">
    <value>Overrides the default GPG encryption command "{0}", normal usage is to request asymetric encryption with the setting {1}</value>
  </data>
  <data name="GpgencryptionencryptioncommandShort" xml:space="preserve">
    <value>The GPG encryption command</value>
  </data>
</root>